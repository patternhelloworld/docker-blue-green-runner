HOST_IP=host.docker.internal

APP_URL=https://localhost:8300

USE_COMMERCIAL_SSL=true
COMMERCIAL_SSL_NAME=yourdomain.com

DOCKER_LAYER_CORRUPTION_RECOVERY=false


NGINX_RESTART=false


# The method of acquiring Docker images:
# build (Used in developer's local environment or during Jenkins builds when a new image needs to be built, so this module is typically used)
# registry (Used on deployment servers where images are fetched from a repository, so this module is used for the production server)
# If you choose the "build" method, you don't need to input the values below since Dockerfile is used (no image is fetched from the Docker registry).
GIT_IMAGE_LOAD_FROM=build
GIT_IMAGE_LOAD_FROM_HOST=yourdomain.com:5050
GIT_IMAGE_LOAD_FROM_PATHNAME=my-group/my-project-name/what/you/want
GIT_TOKEN_IMAGE_LOAD_FROM_USERNAME=aaa
GIT_TOKEN_IMAGE_LOAD_FROM_PASSWORD=12345
GIT_IMAGE_VERSION=1.0.0

PROJECT_NAME=spring-sample-h-auth
PROJECT_LOCATION=/var/www/server/spring-sample-h-auth
PROJECT_PORT=8300
# Example (8093,8094,11000...)
ADDITIONAL_PORTS=


# 1) ''/var/web/project/spring-sample-h-auth' is here
HOST_ROOT_LOCATION=/var/web/project/spring-sample-h-auth
DOCKER_FILE_LOCATION=/var/web/project/spring-sample-h-auth

# This is for integrating health checkers such as "https://www.baeldung.com/spring-boot-actuators"
APP_HEALTH_CHECK_PATH=systemProfile
BAD_APP_HEALTH_CHECK_PATTERN=xxxxxxx
GOOD_APP_HEALTH_CHECK_PATTERN=production


# This is for environment variables for docker-compose-app.
DOCKER_COMPOSE_ENVIRONMENT={"TZ":"Asia/Seoul"}
# This goes with "docker build ... in the 'run.sh' script file", and the command always contain "HOST_IP" and "APP_ENV" above.
# 2) ''/var/web/project/spring-sample-h-auth' is here as well
DOCKER_BUILD_ARGS={"DOCKER_BUILDKIT":"1","PROJECT_ROOT_IN_CONTAINER":"/var/www/server/spring-sample-h-auth","FILE_STORAGE_ROOT_IN_CONTAINER":"/var/www/files","JVM_XMS":"2048","JVM_XMX":"4096"}
DOCKER_BUILD_LABELS=["foo.mylabel=happy","bar.mylabel=happy"]
# EX. --platform linux/amd64
DOCKER_BUILD_ADDITIONAL_RAW_PARAMS=
DOCKER_BUILD_SHA_INSERT_GIT_ROOT=/var/www/server/spring-sample-h-auth

# 3) ''/var/web/project/spring-sample-h-auth' is here as well. The thing is you should locate 'application.properties', 'logback-spring.xml', 'yourdomain.com.jks' on the './src/main/resource' folder.
DOCKER_COMPOSE_SELECTIVE_VOLUMES=["/var/web/files/spring-sample-h-auth:/var/www/files","/var/web/project/spring-sample-h-auth/src/main/resources:/var/www/server/spring-sample-h-auth/src/main/resources"]
DOCKER_COMPOSE_NGINX_SELECTIVE_VOLUMES=["/var/web/files/nginx/spring-sample-h-auth/logs:/var/log/nginx"]
DOCKER_COMPOSE_HOST_VOLUME_CHECK=false

NGINX_CLIENT_MAX_BODY_SIZE=50M

USE_MY_OWN_APP_YML=false

SKIP_BUILDING_APP_IMAGE=false

ORCHESTRATION_TYPE=compose

ONLY_BUILDING_APP_IMAGE=false

DOCKER_BUILD_MEMORY_USAGE=1G

USE_NGINX_RESTRICTED_LOCATION=false
NGINX_RESTRICTED_LOCATION=xxx

# If you set this to 'true', you won't need to configure SSL for your app. For instance, in a Spring Boot project, you won't have to create a ".jks" file. However, in rare situations, such as when it's crucial to secure all communication lines with SSL or when converting HTTPS to HTTP causes 'curl' errors, you might need to set it to 'false'.If you set this to 'true', you don't need to set SSL on your App like for example, for a Spring Boot project, you won't need to create the ".jks" file. However, in rare cases, such as ensuring all communication lines are SSL-protected, or when HTTPS to HTTP causes 'curl' errors, you might need to set it to 'false'.
# 1) true : [Request]--> https (external network) -->Nginx--> http (internal network) --> App
# 2) false :[Request]--> https (external network) -->Nginx--> httpS (internal network) --> App
REDIRECT_HTTPS_TO_HTTP=true

NGINX_LOGROTATE_FILE_NUMBER=7
NGINX_LOGROTATE_FILE_SIZE=1M

SHARED_VOLUME_GROUP_ID=1351
SHARED_VOLUME_GROUP_NAME=shared-volume-group
UIDS_BELONGING_TO_SHARED_VOLUME_GROUP_ID=

USE_MY_OWN_NGINX_ORIGIN=false